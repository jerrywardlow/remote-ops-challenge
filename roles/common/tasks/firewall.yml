---

# UFW rule for publicly accessible nodes
# In this scenario, Nagios master nodes acts as public SSH bastions
- name: Manage UFW - Public SSH
  ufw:
    rule: "allow"
    port: "22"
    proto: "tcp"
  when: "'nagios_masters' in group_names"

# UFW rule for SSH access inbound from SSH bastion
- name: Manage UFW - Private SSH
  ufw:
    rule: "allow"
    src: "{{ hostvars[item].internal_ip }}"
    port: "22"
    proto: "tcp"
  with_inventory_hostnames:
    - nagios_masters
  when: "'private_ssh' in group_names"

# Default UFW policy: deny incoming, allow outgoing
- name: Manage UFW default policy
  ufw:
    state: enabled
    direction: "{{ item.direction }}"
    policy: "{{ item.policy }}"
  with_items:
    - direction: incoming
      policy: deny
    - direction: outgoing
      policy: allow

# UFW rule to allow HTTP access to Nagios masters
- name: Manage UFW - Public HTTP
  ufw:
    rule: "allow"
    port: "80"
    proto: "tcp"
  when: "'nagios_masters' in group_names"

# UFW rule to allow internal HTTP access to webservers from load balancers
- name: Manage UFW - Private HTTP
  ufw:
    rule: "allow"
    src: "{{ hostvars[item].internal_ip }}"
    port: "80"
    proto: "tcp"
  with_inventory_hostnames:
    - balancers
  when: "'webservers' in group_names"

# UFW rule for HAProxy on load balancers
- name: Manage UFW - HAProxy
  ufw:
    rule: "allow"
    port: "60000:65000"
    proto: "tcp"
  when: "'balancers' in group_names"

# UFW rule for NRPE access on Nagios nodes inbound from Nagios master
- name: Manage UFW - NRPE
  ufw:
    rule: "allow"
    src: "{{ hostvars[item].internal_ip }}"
    port: "5666"
    proto: "tcp"
  with_inventory_hostnames:
    - nagios_masters
  when: "'nagios_nodes' in group_names"

# Additional arbitrary UFW rules defined from vars
- name: Manage UFW rules
  ufw:
    rule: "{{ item.rule }}"
    src: "{{ item.src }}"
    port: "{{ item.port }}"
    proto: "{{ item.proto }}"
  with_items:
    - "{{ firewall_rules }}"
  when: firewall_rules is defined

# Semi-arbitrary iptables rules defined from vars
- name: Manage iptables
  iptables:
    action: insert
    in_interface: "{{ item.in_interface }}"
    destination_port: "{{ item.destination_port }}"
    to_ports: "{{ item.to_ports }}"
    table: "{{ item.table }}"
    chain: "{{ item.chain }}"
    protocol: "{{ item.protocol }}"
    match: "{{ item.match }}"
    jump: "{{ item.jump }}"
  with_items:
    - "{{ iptables_rules }}"
  when: iptables_rules is defined
